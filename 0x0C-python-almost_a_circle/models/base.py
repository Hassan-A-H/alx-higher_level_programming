#!/usr/bin/python3
"""
Module that contains the Base class.
This is the base class for managing the `id` attribute for future classes.
"""
import json
import os.path
import csv


class Base:
    """
    The Base class will be the “base” of all other classes in this project.

    Class Attributes:
        __nb_objects (int): Counter for the number of instantiated objects.

    Instance Attributes:
        id (int): The unique identifier for an instance.
    """
    __nb_objects = 0

    def __init__(self, id=None):
        """
        Initializes the Base instance.

        Args:
            id (int, optional): The id of the instance. If None, the id is
            automatically assigned by incrementing the `__nb_objects` counter.
        """
        if id is not None:
            self.id = id
        else:
            Base.__nb_objects += 1
            self.id = Base.__nb_objects

    @staticmethod
    def to_json_string(list_dictionaries):
        """
        Returns the JSON string representation of list_dictionaries.

        Args:
        list_dictionaries (list): A list of dictionaries to convert into a
        JSON string.

        Returns:
        str: A JSON string representation of list_dictionaries.
        If list_dictionaries
             is None or empty, returns "[]".
        """
        if list_dictionaries is None or list_dictionaries == "[]":
            return "[]"
        else:
            return json.dumps(list_dictionaries)

    @staticmethod
    def from_json_string(json_string):
        """
        Return the list of the JSON string representation json_string.

        Args:
        json_string : A string representing a list of dictionaries

        Returns:
        list: A list of the JSON string representation json_string.
        If list_dictionaries
             is None or empty, returns [].
        """
        if json_string is None or json_string == "":
            return []
        else:
            return json.loads(json_string)

    @classmethod
    def save_to_file(cls, list_objs):
        """
        Writes the JSON string representation of list_objs to a file.

        Args:
            list_objs (list): A list of instances of the class.
            Each instance should have
            a `to_dictionary` method to convert the instance to a dictionary.
        """
        filename = "{}.json".format(cls.__name__)
        lst_dict = []

        if list_objs:
            for obj in list_objs:
                lst_dict.append(obj.to_dictionary())

        json_str = cls.to_json_string(lst_dict)

        with open(filename, "w") as f:
            f.write(json_str)

    @classmethod
    def load_from_file(cls):
        """
        Reads the JSON string representation of objects from a file and
        returns a list of instances of cls.

        Returns:
        list: A list of instances of cls loaded from the file. If the file
        doesn't exist, returns an empty list.
        """
        filename = "{}.json".format(cls.__name__)

        if not os.path.exists(filename):
            return []

        with open(filename) as f:
            lst_str = f.read()

        lst_cls = cls.from_json_string(lst_str)
        lst_objs = [cls.create(**obj_dct) for obj_dct in lst_cls]

        return lst_objs

    @classmethod
    def create(cls, **dictionary):
        """
        Creates an instance of cls (either Rectangle or Square) with
        attributes set
        based on the provided dictionary.

        Args:
            **dictionary: A dictionary of attributes for the instance,
            typically generated by the to_dictionary() method of the class.

        Returns:
            obj: An instance of cls with attributes set based on
            the dictionary.
        """
        if cls.__name__ == "Rectangle":
            new = cls(2, 2)
        else:
            new = cls(2)
        new.update(**dictionary)
        return new

    @classmethod
    def save_to_file_csv(cls, list_objs):
        """
        Saves a list of objects to a CSV file.

        Args:
        list_objs (list): List of instances to save into the file.
        Each instance must have a `to_dictionary()` method.
        """
        filename = "{}.csv".format(cls.__name__)

        if cls.__name__ == "Rectangle":
            fieldnames = ['id', 'width', 'height', 'x', 'y']
        else:
            fieldnames = ['id', 'size', 'x', 'y']

        matrix = []

        if list_objs:
            for obj in list_objs:
                obj_dict = obj.to_dictionary()
                row = [obj_dict[key] for key in fieldnames]
                matrix.append(row)

        with open(filename, 'w', newline='') as writeFile:
            writer = csv.writer(writeFile)
            writer.writerows(matrix)

    @classmethod
    def load_from_file_csv(cls):
        """
        Loads a list of instances from a CSV file.

        Returns:
        list: List of instances created from the CSV file.
        """
        filename = "{}.csv".format(cls.__name__)

        if not os.path.exists(filename):
            return []

        with open(filename, 'r') as readFile:
            reader = csv.reader(readFile)
            csv_list = list(reader)

        if cls.__name__ == "Rectangle":
            list_keys = ['id', 'width', 'height', 'x', 'y']
        else:
            list_keys = ['id', 'size', 'x', 'y']

        list_ins = []
        for row in csv_list:
            dict_csv = {key: int(value) for key, value in zip(list_keys, row)}
            list_ins.append(cls.create(**dict_csv))

        return list_ins
